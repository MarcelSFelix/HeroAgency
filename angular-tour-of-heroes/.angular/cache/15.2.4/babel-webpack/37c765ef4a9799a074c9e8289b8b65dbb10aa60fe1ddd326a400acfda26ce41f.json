{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport class AuthService {\n  constructor(router, route) {\n    this.router = router;\n    this.route = route;\n    this.username = '';\n    this.password = '';\n    this.previousUrl = '';\n  }\n  // Check whether the user is logged in and return\n  // true or false\n  isAuthenticated() {\n    const user = localStorage.getItem('currentUser');\n    return user === 'true';\n  }\n  // Logs user in by settung 'currentUser' to 'true'\n  login() {\n    localStorage.setItem('currentUser', 'true');\n  }\n  getPreviousUrl() {\n    return this.previousUrl;\n  }\n  // Remove currentUser from localStorage to log out\n  // Afterwards redirect to login\n  // Does not use query parameters\n  logout() {\n    localStorage.removeItem('currentUser');\n    sessionStorage.setItem('previousUrl', window.location.pathname);\n    //this.router.navigate(['/login'], { queryParams: { returnUrl: state.url }});\n  }\n}\n\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i1.ActivatedRoute));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;AAMA,OAAM,MAAOA,WAAW;EAEtBC,YACUC,MAAc,EACdC,KAAqB;IADrB,WAAM,GAAND,MAAM;IACN,UAAK,GAALC,KAAK;IAEf,aAAQ,GAAW,EAAE;IACrB,aAAQ,GAAW,EAAE;IAEb,gBAAW,GAAW,EAAE;EALG;EAOnC;EACA;EACOC,eAAe;IACpB,MAAMC,IAAI,GAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;IAChD,OAAOF,IAAI,KAAK,MAAM;EACxB;EAEA;EACAG,KAAK;IACHF,YAAY,CAACG,OAAO,CAAC,aAAa,EAAE,MAAM,CAAC;EAC7C;EAEAC,cAAc;IACZ,OAAO,IAAI,CAACC,WAAW;EACzB;EAEA;EACA;EACA;EACAC,MAAM;IACJN,YAAY,CAACO,UAAU,CAAC,aAAa,CAAC;IACtCC,cAAc,CAACL,OAAO,CAAC,aAAa,EAAEM,MAAM,CAACC,QAAQ,CAACC,QAAQ,CAAC;IAC/D;EACF;;;AAlCWjB,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAkB,SAAXlB,WAAW;EAAAmB,YAFV;AAAM","names":["AuthService","constructor","router","route","isAuthenticated","user","localStorage","getItem","login","setItem","getPreviousUrl","previousUrl","logout","removeItem","sessionStorage","window","location","pathname","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\marcel-steven.felix\\angular-tour-of-heroes\\src\\app\\auth\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { ActivatedRoute, Router, RouterStateSnapshot } from '@angular/router';\n\n@Injectable({ \n  providedIn: 'root'\n})\nexport class AuthService {  \n  \n  constructor(\n    private router: Router,\n    private route: ActivatedRoute,) {} \n\n  username: string = '';\n  password: string = '';\n\n  private previousUrl: string = '';\n\n  // Check whether the user is logged in and return\n  // true or false\n  public isAuthenticated(): boolean {\n    const user = localStorage.getItem('currentUser');\n    return user === 'true';\n  }\n  \n  // Logs user in by settung 'currentUser' to 'true'\n  login(): void {\n    localStorage.setItem('currentUser', 'true');\n  }\n  \n  getPreviousUrl(): string {\n    return this.previousUrl;\n  }\n\n  // Remove currentUser from localStorage to log out\n  // Afterwards redirect to login\n  // Does not use query parameters\n  logout(): void {\n    localStorage.removeItem('currentUser');\n    sessionStorage.setItem('previousUrl', window.location.pathname)\n    //this.router.navigate(['/login'], { queryParams: { returnUrl: state.url }});\n  }\n  \n}\n\n  \n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}