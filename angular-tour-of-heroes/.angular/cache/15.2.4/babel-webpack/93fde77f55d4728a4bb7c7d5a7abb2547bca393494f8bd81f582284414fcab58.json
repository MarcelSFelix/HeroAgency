{"ast":null,"code":"import { LoginComponent } from './login/login.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"./auth/auth.service\";\nexport class AuthGuard {\n  constructor(router, authService) {\n    this.router = router;\n    this.authService = authService;\n  }\n  canActivate(route, state) {\n    const authenticated = this.authService.isAuthenticated();\n    if (authenticated) {\n      // authorised so return true\n      return true;\n    } else {\n      const dialogRef = this.dialog.open(LoginComponent, {\n        width: '400px'\n      });\n      dialogRef.afterClosed().subscribe(result => {\n        if (!this.authService.isLoggedIn()) {\n          this.canActivate(route, state); // Re-open login popup if user is still not logged in\n        }\n      });\n\n      return false;\n      /*\r\n      // not logged in so redirect to login page with the return url\r\n      this.router.navigate(['/login'], { queryParams: { returnUrl: state.url }});\r\n      return false;\r\n      */\n    }\n  }\n}\n\nAuthGuard.ɵfac = function AuthGuard_Factory(t) {\n  return new (t || AuthGuard)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.AuthService));\n};\nAuthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthGuard,\n  factory: AuthGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAIA,SAASA,cAAc,QAAQ,yBAAyB;;;;AAGxD,OAAM,MAAOC,SAAS;EAClBC,YACYC,MAAc,EACdC,WAAwB;IADxB,WAAM,GAAND,MAAM;IACN,gBAAW,GAAXC,WAAW;EACpB;EAEHC,WAAW,CAACC,KAA6B,EAAEC,KAA0B;IACjE,MAAMC,aAAa,GAAG,IAAI,CAACJ,WAAW,CAACK,eAAe,EAAE;IACxD,IAAID,aAAa,EAAE;MACf;MACA,OAAO,IAAI;KACd,MAAM;MACH,MAAME,SAAS,GAAG,IAAI,CAACC,MAAM,CAACC,IAAI,CAACZ,cAAc,EAAE;QACjDa,KAAK,EAAE;OACR,CAAC;MAEFH,SAAS,CAACI,WAAW,EAAE,CAACC,SAAS,CAACC,MAAM,IAAG;QACzC,IAAI,CAAC,IAAI,CAACZ,WAAW,CAACa,UAAU,EAAE,EAAE;UAClC,IAAI,CAACZ,WAAW,CAACC,KAAK,EAAEC,KAAK,CAAC,CAAC,CAAC;;MAEpC,CAAC,CAAC;;MAEF,OAAO,KAAK;MAGhB;;;;;;EAMR;;;AA/BaN,SAAS;mBAATA,SAAS;AAAA;AAATA,SAAS;SAATA,SAAS;EAAAiB,SAATjB,SAAS;EAAAkB,YADI;AAAM","names":["LoginComponent","AuthGuard","constructor","router","authService","canActivate","route","state","authenticated","isAuthenticated","dialogRef","dialog","open","width","afterClosed","subscribe","result","isLoggedIn","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\marcel-steven.felix\\angular-tour-of-heroes\\src\\app\\auth.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Router, CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\n\nimport { AuthService } from './auth/auth.service';\nimport { LoginComponent } from './login/login.component';\n\n@Injectable({ providedIn: 'root' })\nexport class AuthGuard implements CanActivate {\n    constructor(\n        private router: Router,\n        private authService: AuthService\n    ) {}\n\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n        const authenticated = this.authService.isAuthenticated();\n        if (authenticated) {\n            // authorised so return true\n            return true;\n        } else {\n            const dialogRef = this.dialog.open(LoginComponent, {\n              width: '400px'\n            });\n        \n            dialogRef.afterClosed().subscribe(result => {\n              if (!this.authService.isLoggedIn()) {\n                this.canActivate(route, state); // Re-open login popup if user is still not logged in\n              }\n            });\n        \n            return false;\n\n        \n        /*\n        // not logged in so redirect to login page with the return url\n        this.router.navigate(['/login'], { queryParams: { returnUrl: state.url }});\n        return false;\n        */\n    }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}