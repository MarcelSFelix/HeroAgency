{"ast":null,"code":"import { LoginComponent } from './login/login.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"./auth/auth.service\";\nimport * as i3 from \"@angular/material/dialog\";\nexport class AuthGuard {\n  constructor(router, authService, dialog) {\n    this.router = router;\n    this.authService = authService;\n    this.dialog = dialog;\n  }\n  canActivate(route, state) {\n    const authenticated = this.authService.isAuthenticated();\n    if (authenticated) {\n      // authorised so return true\n      return true;\n    } else {\n      const returnUrl = state.url;\n      const dialogRef = this.dialog.open(LoginComponent, {\n        width: '400px',\n        disableClose: true\n      });\n      return dialogRef.afterClosed().toPromise().then(result => {\n        if (result) {\n          // ToDo Implement being redirected to requested site\n          // returnUrl = undefined\n          const returnUrl = route.queryParams['returnUrl'] || '/';\n          console.log(\"Before logging returnUrl in auth.guard\");\n          console.log(returnUrl);\n          this.router.navigateByUrl(returnUrl);\n          console.log(\"After navigating in auth.guard\");\n          return true;\n        } else {\n          return false;\n        }\n      });\n    }\n  }\n}\nAuthGuard.ɵfac = function AuthGuard_Factory(t) {\n  return new (t || AuthGuard)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.AuthService), i0.ɵɵinject(i3.MatDialog));\n};\nAuthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthGuard,\n  factory: AuthGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAIA,SAASA,cAAc,QAAQ,yBAAyB;;;;;AAIxD,OAAM,MAAOC,SAAS;EAClBC,YACYC,MAAc,EACdC,WAAwB,EACxBC,MAAiB;IAFjB,WAAM,GAANF,MAAM;IACN,gBAAW,GAAXC,WAAW;IACX,WAAM,GAANC,MAAM;EACf;EAEHC,WAAW,CAACC,KAA6B,EAAEC,KAA0B;IACjE,MAAMC,aAAa,GAAG,IAAI,CAACL,WAAW,CAACM,eAAe,EAAE;IACxD,IAAID,aAAa,EAAE;MACf;MACA,OAAO,IAAI;KACd,MAAM;MACL,MAAME,SAAS,GAAGH,KAAK,CAACI,GAAG;MACzB,MAAMC,SAAS,GAAG,IAAI,CAACR,MAAM,CAACS,IAAI,CAACd,cAAc,EAAE;QACjDe,KAAK,EAAE,OAAO;QACdC,YAAY,EAAE;OACf,CAAC;MAEF,OAAOH,SAAS,CAACI,WAAW,EAAE,CAACC,SAAS,EAAE,CAACC,IAAI,CAACC,MAAM,IAAG;QACrD,IAAIA,MAAM,EAAE;UACV;UACA;UACA,MAAMT,SAAS,GAAGJ,KAAK,CAACc,WAAW,CAAC,WAAW,CAAC,IAAI,GAAG;UACvDC,OAAO,CAACC,GAAG,CAAC,wCAAwC,CAAC;UACrDD,OAAO,CAACC,GAAG,CAACZ,SAAS,CAAC;UACtB,IAAI,CAACR,MAAM,CAACqB,aAAa,CAACb,SAAS,CAAC;UACpCW,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;UAC7C,OAAO,IAAI;SACZ,MAAM;UAEL,OAAO,KAAK;;MAEhB,CAAC,CAAC;;EAEZ;;AAnCStB,SAAS;mBAATA,SAAS;AAAA;AAATA,SAAS;SAATA,SAAS;EAAAwB,SAATxB,SAAS;EAAAyB,YADI;AAAM","names":["LoginComponent","AuthGuard","constructor","router","authService","dialog","canActivate","route","state","authenticated","isAuthenticated","returnUrl","url","dialogRef","open","width","disableClose","afterClosed","toPromise","then","result","queryParams","console","log","navigateByUrl","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\marcel-steven.felix\\angular-tour-of-heroes\\src\\app\\auth.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Router, CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\n\nimport { AuthService } from './auth/auth.service';\nimport { LoginComponent } from './login/login.component';\nimport { MatDialog } from '@angular/material/dialog';\n\n@Injectable({ providedIn: 'root' })\nexport class AuthGuard implements CanActivate {\n    constructor(\n        private router: Router,\n        private authService: AuthService,\n        private dialog: MatDialog,\n    ) {}\n\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n        const authenticated = this.authService.isAuthenticated();\n        if (authenticated) {\n            // authorised so return true\n            return true;\n        } else {\n          const returnUrl = state.url\n            const dialogRef = this.dialog.open(LoginComponent, {\n              width: '400px',\n              disableClose: true\n            });\n        \n            return dialogRef.afterClosed().toPromise().then(result => {\n                if (result) {\n                  // ToDo Implement being redirected to requested site\n                  // returnUrl = undefined\n                  const returnUrl = route.queryParams['returnUrl'] || '/';\n                  console.log(\"Before logging returnUrl in auth.guard\")\n                  console.log(returnUrl)\n                  this.router.navigateByUrl(returnUrl);\n                  console.log(\"After navigating in auth.guard\")\n                  return true;\n                } else {\n                  \n                  return false;\n                }\n              });\n            }\n    }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}