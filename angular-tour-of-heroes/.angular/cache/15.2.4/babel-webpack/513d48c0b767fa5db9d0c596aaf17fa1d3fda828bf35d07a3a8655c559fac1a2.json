{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.username = '';\n    this.password = '';\n  }\n  // Check whether the user is logged in and return\n  // true or false\n  isAuthenticated() {\n    const user = sessionStorage.getItem('currentUser');\n    return user === 'true';\n  }\n  // Logs user in by setting 'currentUser' to 'true'\n  login(username, password) {\n    return new Promise((resolve, reject) => {\n      if (username === 'admin' && password === '123') {\n        sessionStorage.setItem('currentUser', 'true');\n        resolve(true);\n      } else {\n        resolve(false);\n      }\n    });\n  }\n  // Remove currentUser from localStorage to log out\n  logout() {\n    return this.http.post('/logout/', {}).toPromise().then(response => {\n      sessionStorage.removeItem('currentUser');\n    }).catch(error => {\n      console.error('Logout failed:', error);\n    });\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;AAMA,OAAM,MAAOA,WAAW;EAEtBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAExB,aAAQ,GAAW,EAAE;IACrB,aAAQ,GAAW,EAAE;EAHkB;EAKvC;EACA;EACOC,eAAe;IACpB,MAAMC,IAAI,GAAGC,cAAc,CAACC,OAAO,CAAC,aAAa,CAAC;IAClD,OAAOF,IAAI,KAAK,MAAM;EACxB;EAEA;EACAG,KAAK,CAACC,QAAgB,EAAEC,QAAgB;IACtC,OAAO,IAAIC,OAAO,CAAU,CAACC,OAAO,EAAEC,MAAM,KAAI;MAC9C,IAAIJ,QAAQ,KAAK,OAAO,IAAIC,QAAQ,KAAK,KAAK,EAAE;QAC9CJ,cAAc,CAACQ,OAAO,CAAC,aAAa,EAAE,MAAM,CAAC;QAC7CF,OAAO,CAAC,IAAI,CAAC;OACd,MAAM;QACLA,OAAO,CAAC,KAAK,CAAC;;IAElB,CAAC,CAAC;EACJ;EAEA;EACAG,MAAM;IACJ,OAAO,IAAI,CAACZ,IAAI,CAACa,IAAI,CAAC,UAAU,EAAE,EAAE,CAAC,CAACC,SAAS,EAAE,CAC9CC,IAAI,CAACC,QAAQ,IAAG;MACfb,cAAc,CAACc,UAAU,CAAC,aAAa,CAAC;IAC1C,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAG;MACbC,OAAO,CAACD,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;IACxC,CAAC,CAAC;EACN;;AAnCWrB,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAuB,SAAXvB,WAAW;EAAAwB,YAFV;AAAM","names":["AuthService","constructor","http","isAuthenticated","user","sessionStorage","getItem","login","username","password","Promise","resolve","reject","setItem","logout","post","toPromise","then","response","removeItem","catch","error","console","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\marcel-steven.felix\\HeroAgency\\angular-tour-of-heroes\\src\\app\\auth\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({ \n  providedIn: 'root'\n})\nexport class AuthService {  \n  \n  constructor(private http: HttpClient) {} \n\n  username: string = '';\n  password: string = '';\n\n  // Check whether the user is logged in and return\n  // true or false\n  public isAuthenticated(): boolean {\n    const user = sessionStorage.getItem('currentUser');\n    return user === 'true';\n  }\n  \n  // Logs user in by setting 'currentUser' to 'true'\n  login(username: string, password: string): Promise<boolean> {\n    return new Promise<boolean>((resolve, reject) => {\n      if (username === 'admin' && password === '123') {\n        sessionStorage.setItem('currentUser', 'true');\n        resolve(true);\n      } else {\n        resolve(false);\n      }\n    });\n  }\n\n  // Remove currentUser from localStorage to log out\n  logout(): Promise<any> {\n    return this.http.post('/logout/', {}).toPromise()\n      .then(response => {\n        sessionStorage.removeItem('currentUser');\n      })\n      .catch(error => {\n        console.error('Logout failed:', error);\n      });\n  }\n\n}\n\n  \n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}