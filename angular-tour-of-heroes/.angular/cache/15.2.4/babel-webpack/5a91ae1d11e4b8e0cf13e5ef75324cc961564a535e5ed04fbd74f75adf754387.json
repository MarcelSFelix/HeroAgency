{"ast":null,"code":"import { LoginComponent } from './login/login.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"./auth/auth.service\";\nimport * as i3 from \"@angular/material/dialog\";\nexport class AuthGuard {\n  constructor(router, authService, dialog) {\n    this.router = router;\n    this.authService = authService;\n    this.dialog = dialog;\n  }\n  // If user is authenticated they will be allowed to pass\n  // else it will save the requested url. open a login popup\n  // and after successful login redirect them to requested url\n  canActivate(route, state) {\n    const returnUrl = state.url;\n    const authenticated = this.authService.isAuthenticated();\n    if (authenticated) {\n      return true;\n    } else {\n      const dialogRef = this.dialog.open(LoginComponent, {\n        width: '400px',\n        disableClose: true\n      });\n      return dialogRef.afterClosed().toPromise().then(result => {\n        if (result) {\n          this.router.navigateByUrl(returnUrl);\n          return true;\n        } else {\n          return false;\n        }\n      });\n    }\n  }\n}\nAuthGuard.ɵfac = function AuthGuard_Factory(t) {\n  return new (t || AuthGuard)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.AuthService), i0.ɵɵinject(i3.MatDialog));\n};\nAuthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthGuard,\n  factory: AuthGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAIA,SAASA,cAAc,QAAQ,yBAAyB;;;;;AAIxD,OAAM,MAAOC,SAAS;EAClBC,YACYC,MAAc,EACdC,WAAwB,EACxBC,MAAiB;IAFjB,WAAM,GAANF,MAAM;IACN,gBAAW,GAAXC,WAAW;IACX,WAAM,GAANC,MAAM;EACf;EAEH;EACA;EACA;EACAC,WAAW,CAACC,KAA6B,EAAEC,KAA0B;IACnE,MAAMC,SAAS,GAAGD,KAAK,CAACE,GAAG;IAC3B,MAAMC,aAAa,GAAG,IAAI,CAACP,WAAW,CAACQ,eAAe,EAAE;IACxD,IAAID,aAAa,EAAE;MACjB,OAAO,IAAI;KACZ,MAAM;MACH,MAAME,SAAS,GAAG,IAAI,CAACR,MAAM,CAACS,IAAI,CAACd,cAAc,EAAE;QACjDe,KAAK,EAAE,OAAO;QACdC,YAAY,EAAE;OACf,CAAC;MACF,OAAOH,SAAS,CAACI,WAAW,EAAE,CAACC,SAAS,EAAE,CAACC,IAAI,CAACC,MAAM,IAAG;QACvD,IAAIA,MAAM,EAAE;UACV,IAAI,CAACjB,MAAM,CAACkB,aAAa,CAACZ,SAAS,CAAC;UACpC,OAAO,IAAI;SACZ,MAAM;UACL,OAAO,KAAK;;MAEhB,CAAC,CAAC;;EAER;;AA7BSR,SAAS;mBAATA,SAAS;AAAA;AAATA,SAAS;SAATA,SAAS;EAAAqB,SAATrB,SAAS;EAAAsB,YADI;AAAM","names":["LoginComponent","AuthGuard","constructor","router","authService","dialog","canActivate","route","state","returnUrl","url","authenticated","isAuthenticated","dialogRef","open","width","disableClose","afterClosed","toPromise","then","result","navigateByUrl","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\marcel-steven.felix\\angular-tour-of-heroes\\src\\app\\auth.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Router, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\n\nimport { AuthService } from './auth/auth.service';\nimport { LoginComponent } from './login/login.component';\nimport { MatDialog } from '@angular/material/dialog';\n\n@Injectable({ providedIn: 'root' })\nexport class AuthGuard {\n    constructor(\n        private router: Router,\n        private authService: AuthService,\n        private dialog: MatDialog,\n    ) {}\n\n    // If user is authenticated they will be allowed to pass\n    // else it will save the requested url. open a login popup\n    // and after successful login redirect them to requested url\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n      const returnUrl = state.url;\n      const authenticated = this.authService.isAuthenticated();\n      if (authenticated) {\n        return true;\n      } else {\n          const dialogRef = this.dialog.open(LoginComponent, {\n            width: '400px',            \n            disableClose: true\n          });\n          return dialogRef.afterClosed().toPromise().then(result => {\n            if (result) {                 \n              this.router.navigateByUrl(returnUrl);\n              return true;\n            } else {\n              return false;\n            }\n          });\n        }\n    }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}