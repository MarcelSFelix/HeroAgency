{"ast":null,"code":"import { of } from 'rxjs';\nimport { HttpHeaders } from '@angular/common/http';\nimport { catchError, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./message.service\";\nexport class HeroService {\n  constructor(http, messageService) {\n    this.http = http;\n    this.messageService = messageService;\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n    this.heroesUrl = 'api/heroes';\n  }\n  /** GET heroes from the server */\n  getHeroes() {\n    return this.http.get(this.heroesUrl).pipe(tap(_ => this.log('fetched heroes')), catchError(this.handleError('getHeroes', [])));\n  }\n  /** GET hero by id. Will 404 if id not found */\n  getHero(id) {\n    const url = `${this.heroesUrl}/${id}`;\n    return this.http.get(url).pipe(tap(_ => this.log(`fetched hero id=${id}`)), catchError(this.handleError(`getHero id=${id}`)));\n  }\n  /** PUT: update the hero on the server */\n  updateHero(hero) {\n    return this.http.put(this.heroesUrl, hero, this.httpOptions).pipe(tap(_ => this.log(`updated hero id=${hero.id}`)), catchError(this.handleError('updateHero')));\n  }\n  /** POST: add a new hero to the server */\n  addHero(hero) {\n    return this.http.post(this.heroesUrl, hero, this.httpOptions).pipe(tap(newHero => this.log(`added hero w/ id=${newHero.id}`)), catchError(this.handleError('addHero')));\n  }\n  /** DELETE: delete the hero from the server */\n  deleteHero(id) {\n    const url = `${this.heroesUrl}/${id}`;\n    return this.http.delete(url, this.httpOptions).pipe(tap(_ => this.log(`deleted hero id=${id}`)), catchError(this.handleError('deleteHero')));\n  }\n  log(message) {\n    this.messageService.add(`HeroService: ${message}`);\n  }\n  /**\r\n  * Handle Http operation that failed.\r\n  * Let the app continue.\r\n  *\r\n  * @param operation - name of the operation that failed\r\n  * @param result - optional value to return as the observable result\r\n  */\n  handleError(operation = 'operation', result) {\n    return error => {\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n      // TODO: better job of transforming error for user consumption\n      this.log(`${operation} failed: ${error.message}`);\n      // Let the app keep running by returning an empty result.\n      return of(result);\n    };\n  }\n}\nHeroService.ɵfac = function HeroService_Factory(t) {\n  return new (t || HeroService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.MessageService));\n};\nHeroService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: HeroService,\n  factory: HeroService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["of","HttpHeaders","catchError","tap","HeroService","constructor","http","messageService","headers","getHeroes","get","heroesUrl","pipe","_","log","handleError","getHero","id","url","updateHero","hero","put","httpOptions","addHero","post","newHero","deleteHero","delete","message","add","operation","result","error","console","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\marcel-steven.felix\\angular-tour-of-heroes\\src\\app\\hero.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\nimport { Observable, of } from 'rxjs';\n\nimport { Hero } from './hero';\nimport { HEROES } from './mock-heroes';\nimport { MessageService } from './message.service';\n\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { catchError, map, tap } from 'rxjs/operators';\n\n@Injectable({ providedIn: 'root' })\nexport class HeroService {\n\n  constructor(\n    private http: HttpClient,\n    private messageService: MessageService) { }\n\n  /** GET heroes from the server */\n  getHeroes(): Observable<Hero[]> {\n    return this.http.get<Hero[]>(this.heroesUrl)\n      .pipe(\n        tap(_ => this.log('fetched heroes')),\n        catchError(this.handleError<Hero[]>('getHeroes', []))\n      );\n  }\n\n  /** GET hero by id. Will 404 if id not found */\n  getHero(id: number): Observable<Hero> {\n    const url = `${this.heroesUrl}/${id}`;\n    return this.http.get<Hero>(url).pipe(\n      tap(_ => this.log(`fetched hero id=${id}`)),\n      catchError(this.handleError<Hero>(`getHero id=${id}`))\n    );\n  }\n\n  /** PUT: update the hero on the server */\n  updateHero(hero: Hero): Observable<any> {\n    return this.http.put(this.heroesUrl, hero, this.httpOptions).pipe(\n      tap(_ => this.log(`updated hero id=${hero.id}`)),\n      catchError(this.handleError<any>('updateHero'))\n    );\n  }\n\n  /** POST: add a new hero to the server */\n  addHero(hero: Hero): Observable<Hero> {\n    return this.http.post<Hero>(this.heroesUrl, hero, this.httpOptions).pipe(\n      tap((newHero: Hero) => this.log(`added hero w/ id=${newHero.id}`)),\n      catchError(this.handleError<Hero>('addHero'))\n    );\n  }\n\n  /** DELETE: delete the hero from the server */\n  deleteHero(id: number): Observable<Hero> {\n    const url = `${this.heroesUrl}/${id}`;\n\n    return this.http.delete<Hero>(url, this.httpOptions).pipe(\n      tap(_ => this.log(`deleted hero id=${id}`)),\n      catchError(this.handleError<Hero>('deleteHero'))\n    );\n  }\n\n  /* GET heroes whose name coontains search term*/\n  searchHeroes(term:)\n\n  httpOptions = {\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n  };\n\n  private log(message: string) {\n    this.messageService.add(`HeroService: ${message}`);\n  }\n\n  private heroesUrl = 'api/heroes';\n\n  /**\n * Handle Http operation that failed.\n * Let the app continue.\n *\n * @param operation - name of the operation that failed\n * @param result - optional value to return as the observable result\n */\nprivate handleError<T>(operation = 'operation', result?: T) {\n  return (error: any): Observable<T> => {\n\n    // TODO: send the error to remote logging infrastructure\n    console.error(error); // log to console instead\n\n    // TODO: better job of transforming error for user consumption\n    this.log(`${operation} failed: ${error.message}`);\n\n    // Let the app keep running by returning an empty result.\n    return of(result as T);\n  };\n}\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}