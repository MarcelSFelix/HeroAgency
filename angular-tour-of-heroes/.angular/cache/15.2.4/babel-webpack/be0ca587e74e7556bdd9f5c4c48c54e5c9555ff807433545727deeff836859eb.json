{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"./auth/auth.service\";\nexport class AuthGuard {\n  constructor(router, authService) {\n    this.router = router;\n    this.authService = authService;\n  }\n  canActivate(route, state) {\n    const authenticated = this.authService.isAuthenticated();\n    if (authenticated) {\n      // authorised so return true\n      return true;\n    }\n    const dialogRef = this.dialog.open(LoginDialogComponent, {\n      width: '500px',\n      disableClose: true\n    });\n    return dialogRef.afterClosed().pipe(map(result => {\n      if (result) {\n        return true;\n      } else {\n        this.router.navigate(['/']);\n        return false;\n      }\n    }));\n    // not logged in so redirect to login page with the return url\n    /*this.router.navigate(['/login'], { queryParams: { returnUrl: state.url }});\r\n    return false;*/\n  }\n}\n\nAuthGuard.ɵfac = function AuthGuard_Factory(t) {\n  return new (t || AuthGuard)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.AuthService));\n};\nAuthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthGuard,\n  factory: AuthGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;AAOA,OAAM,MAAOA,SAAS;EAClBC,YACYC,MAAc,EACdC,WAAwB;IADxB,WAAM,GAAND,MAAM;IACN,gBAAW,GAAXC,WAAW;EACpB;EAEHC,WAAW,CAACC,KAA6B,EAAEC,KAA0B;IACjE,MAAMC,aAAa,GAAG,IAAI,CAACJ,WAAW,CAACK,eAAe,EAAE;IACxD,IAAID,aAAa,EAAE;MACf;MACA,OAAO,IAAI;;IAGf,MAAME,SAAS,GAAG,IAAI,CAACC,MAAM,CAACC,IAAI,CAACC,oBAAoB,EAAE;MACrDC,KAAK,EAAE,OAAO;MACdC,YAAY,EAAE;KACf,CAAC;IAEF,OAAOL,SAAS,CAACM,WAAW,EAAE,CAACC,IAAI,CAACC,GAAG,CAACC,MAAM,IAAG;MAC/C,IAAIA,MAAM,EAAE;QACV,OAAO,IAAI;OACZ,MAAM;QACL,IAAI,CAAChB,MAAM,CAACiB,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;QAC3B,OAAO,KAAK;;IAEhB,CAAC,CAAC,CAAC;IAEL;IACA;;EAEJ;;;AA9BSnB,SAAS;mBAATA,SAAS;AAAA;AAATA,SAAS;SAATA,SAAS;EAAAoB,SAATpB,SAAS;EAAAqB,YADI;AAAM","names":["AuthGuard","constructor","router","authService","canActivate","route","state","authenticated","isAuthenticated","dialogRef","dialog","open","LoginDialogComponent","width","disableClose","afterClosed","pipe","map","result","navigate","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\marcel-steven.felix\\angular-tour-of-heroes\\src\\app\\auth.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Router, CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\n\nimport { AuthService } from './auth/auth.service';\nimport { LoginComponent } from './login/login.component';\n\n@Injectable({ providedIn: 'root' })\nexport class AuthGuard implements CanActivate {\n    constructor(\n        private router: Router,\n        private authService: AuthService\n    ) {}\n\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n        const authenticated = this.authService.isAuthenticated();\n        if (authenticated) {\n            // authorised so return true\n            return true;\n        }\n\n        const dialogRef = this.dialog.open(LoginDialogComponent, {\n            width: '500px',\n            disableClose: true\n          });\n    \n          return dialogRef.afterClosed().pipe(map(result => {\n            if (result) {\n              return true;\n            } else {\n              this.router.navigate(['/']);\n              return false;\n            }\n          }));\n\n        // not logged in so redirect to login page with the return url\n        /*this.router.navigate(['/login'], { queryParams: { returnUrl: state.url }});\n        return false;*/\n    }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}