{"ast":null,"code":"import { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth/auth.service\";\nimport * as i2 from \"@angular/router\";\nexport class AuthGuard {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  canActivate(route, state) {\n    return this.authService.isAuthenticated().pipe(tap(isAuthenticated => {\n      if (!isAuthenticated) {\n        this.router.navigate(['/login'], {\n          queryParams: {\n            returnUrl: state.url\n          }\n        });\n      }\n    }));\n  }\n}\nAuthGuard.ɵfac = function AuthGuard_Factory(t) {\n  return new (t || AuthGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n};\nAuthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthGuard,\n  factory: AuthGuard.ɵfac\n});","map":{"version":3,"mappings":"AAIA,SAASA,GAAG,QAAQ,gBAAgB;;;;AAGpC,OAAM,MAAOC,SAAS;EACpBC,YAAoBC,WAAwB,EAAUC,MAAc;IAAhD,gBAAW,GAAXD,WAAW;IAAuB,WAAM,GAANC,MAAM;EAAW;EAEvEC,WAAW,CAACC,KAA6B,EAAEC,KAA0B;IACnE,OAAO,IAAI,CAACJ,WAAW,CAACK,eAAe,EAAE,CAACC,IAAI,CAC5CT,GAAG,CAACQ,eAAe,IAAG;MACpB,IAAI,CAACA,eAAe,EAAE;QACpB,IAAI,CAACJ,MAAM,CAACM,QAAQ,CAAC,CAAC,QAAQ,CAAC,EAAE;UAAEC,WAAW,EAAE;YAAEC,SAAS,EAAEL,KAAK,CAACM;UAAG;QAAE,CAAC,CAAC;;IAE9E,CAAC,CAAC,CACH;EACH;;AAXWZ,SAAS;mBAATA,SAAS;AAAA;AAATA,SAAS;SAATA,SAAS;EAAAa,SAATb,SAAS;AAAA","names":["tap","AuthGuard","constructor","authService","router","canActivate","route","state","isAuthenticated","pipe","navigate","queryParams","returnUrl","url","factory"],"sourceRoot":"","sources":["C:\\Users\\marcel-steven.felix\\HeroAgency\\angular-tour-of-heroes\\src\\app\\auth.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { CanActivate, Router, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { AuthService } from './auth/auth.service';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Injectable()\nexport class AuthGuard implements CanActivate {\n  constructor(private authService: AuthService, private router: Router) {}\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> {\n    return this.authService.isAuthenticated().pipe(\n      tap(isAuthenticated => {\n        if (!isAuthenticated) {\n          this.router.navigate(['/login'], { queryParams: { returnUrl: state.url }});\n        }\n      })\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}