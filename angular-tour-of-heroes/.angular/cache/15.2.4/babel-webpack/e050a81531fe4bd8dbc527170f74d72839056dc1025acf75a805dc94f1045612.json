{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { LoginComponent } from './login/login.component';\nlet AuthGuard = class AuthGuard {\n  constructor(router, authService, dialog) {\n    this.router = router;\n    this.authService = authService;\n    this.dialog = dialog;\n  }\n  canActivate(route, state) {\n    const authenticated = this.authService.isAuthenticated();\n    if (authenticated) {\n      // authorised so return true\n      return true;\n    } else {\n      const dialogRef = this.dialog.open(LoginComponent, {\n        width: '400px'\n      });\n      dialogRef.afterClosed().subscribe(result => {\n        if (!this.authService.isLoggedIn()) {\n          this.canActivate(route, state); // Re-open login popup if user is still not logged in\n        }\n      });\n\n      return false;\n      /*\r\n      // not logged in so redirect to login page with the return url\r\n      this.router.navigate(['/login'], { queryParams: { returnUrl: state.url }});\r\n      return false;\r\n      */\n    }\n  }\n};\n\nAuthGuard = __decorate([Injectable({\n  providedIn: 'root'\n})], AuthGuard);\nexport { AuthGuard };","map":{"version":3,"mappings":";AAAA,SAASA,UAAU,QAAQ,eAAe;AAI1C,SAASC,cAAc,QAAQ,yBAAyB;AAIjD,IAAMC,SAAS,GAAf,MAAMA,SAAS;EAClBC,YACYC,MAAc,EACdC,WAAwB,EACxBC,MAAM;IAFN,WAAM,GAANF,MAAM;IACN,gBAAW,GAAXC,WAAW;IACX,WAAM,GAANC,MAAM;EACf;EAEHC,WAAW,CAACC,KAA6B,EAAEC,KAA0B;IACjE,MAAMC,aAAa,GAAG,IAAI,CAACL,WAAW,CAACM,eAAe,EAAE;IACxD,IAAID,aAAa,EAAE;MACf;MACA,OAAO,IAAI;KACd,MAAM;MACH,MAAME,SAAS,GAAG,IAAI,CAACN,MAAM,CAACO,IAAI,CAACZ,cAAc,EAAE;QACjDa,KAAK,EAAE;OACR,CAAC;MAEFF,SAAS,CAACG,WAAW,EAAE,CAACC,SAAS,CAACC,MAAM,IAAG;QACzC,IAAI,CAAC,IAAI,CAACZ,WAAW,CAACa,UAAU,EAAE,EAAE;UAClC,IAAI,CAACX,WAAW,CAACC,KAAK,EAAEC,KAAK,CAAC,CAAC,CAAC;;MAEpC,CAAC,CAAC;;MAEF,OAAO,KAAK;MAGhB;;;;;;EAMR;CAAC;;AAhCYP,SAAS,eADrBF,UAAU,CAAC;EAAEmB,UAAU,EAAE;AAAM,CAAE,CAAC,GACtBjB,SAAS,CAgCrB;SAhCYA,SAAS","names":["Injectable","LoginComponent","AuthGuard","constructor","router","authService","dialog","canActivate","route","state","authenticated","isAuthenticated","dialogRef","open","width","afterClosed","subscribe","result","isLoggedIn","providedIn"],"sourceRoot":"","sources":["C:\\Users\\marcel-steven.felix\\angular-tour-of-heroes\\src\\app\\auth.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Router, CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\n\nimport { AuthService } from './auth/auth.service';\nimport { LoginComponent } from './login/login.component';\nimport { MatDialog } from '@angular/material/dialog';\n\n@Injectable({ providedIn: 'root' })\nexport class AuthGuard implements CanActivate {\n    constructor(\n        private router: Router,\n        private authService: AuthService,\n        private dialog\n    ) {}\n\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n        const authenticated = this.authService.isAuthenticated();\n        if (authenticated) {\n            // authorised so return true\n            return true;\n        } else {\n            const dialogRef = this.dialog.open(LoginComponent, {\n              width: '400px'\n            });\n        \n            dialogRef.afterClosed().subscribe(result => {\n              if (!this.authService.isLoggedIn()) {\n                this.canActivate(route, state); // Re-open login popup if user is still not logged in\n              }\n            });\n        \n            return false;\n\n        \n        /*\n        // not logged in so redirect to login page with the return url\n        this.router.navigate(['/login'], { queryParams: { returnUrl: state.url }});\n        return false;\n        */\n    }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}