{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.authUrl = 'http://localhost:8080/accounts';\n    this.username = '';\n    this.password = '';\n  }\n  // Check whether the user is logged in and return\n  // true or false\n  isAuthenticated() {\n    const checkUrl = `${this.authUrl}/is-authenticated/`;\n    return this.http.get(checkUrl);\n  }\n  // Logs user in by setting 'currentUser' to 'true'\n  login(username, password) {\n    const loginUrl = `${this.authUrl}/login/`;\n    const loginData = {\n      username: username,\n      password: password\n    };\n    const headers = new HttpHeaders().set('Content-Type', 'application/json'); // Set the Content-Type header\n    return this.http.post(loginUrl, loginData, {\n      headers: headers\n    }).subscribe(response => {\n      // Successful login\n      console.log('Login successful:', response);\n      // Redirect the user to the authenticated section of your website\n      window.location.href = '/authenticated-section'; // Replace with your actual URL\n    }, error => {\n      // Error handling\n      console.error('Login error:', error);\n      // Handle the error and display an appropriate message to the user\n    });\n  }\n  // Call view to log user out\n  logout() {\n    const logoutUrl = `${this.authUrl}/logout/`;\n    return this.http.post(logoutUrl, null);\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;;;AAM9D,OAAM,MAAOC,WAAW;EAGtBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFhB,YAAO,GAAG,gCAAgC;IAIlD,aAAQ,GAAW,EAAE;IACrB,aAAQ,GAAW,EAAE;EAHkB;EAKvC;EACA;EACAC,eAAe;IACb,MAAMC,QAAQ,GAAG,GAAG,IAAI,CAACC,OAAO,oBAAoB;IACpD,OAAO,IAAI,CAACH,IAAI,CAACI,GAAG,CAAUF,QAAQ,CAAC;EACzC;EAEA;EACAG,KAAK,CAACC,QAAgB,EAAEC,QAAgB;IACtC,MAAMC,QAAQ,GAAG,GAAG,IAAI,CAACL,OAAO,SAAS;IACzC,MAAMM,SAAS,GAAG;MAAEH,QAAQ,EAAEA,QAAQ;MAAEC,QAAQ,EAAEA;IAAQ,CAAE;IAE5D,MAAMG,OAAO,GAAG,IAAIb,WAAW,EAAE,CAACc,GAAG,CAAC,cAAc,EAAE,kBAAkB,CAAC,CAAC,CAAC;IAE3E,OAAO,IAAI,CAACX,IAAI,CAACY,IAAI,CAACJ,QAAQ,EAAEC,SAAS,EAAE;MAAEC,OAAO,EAAEA;IAAO,CAAE,CAAC,CAACG,SAAS,CACvEC,QAAQ,IAAI;MACX;MACAC,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEF,QAAQ,CAAC;MAC1C;MACAG,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,wBAAwB,CAAC,CAAC;IACnD,CAAC,EACAC,KAAK,IAAI;MACR;MACAL,OAAO,CAACK,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;MACpC;IACF,CAAC,CACF;EACH;EAEA;EACAC,MAAM;IACJ,MAAMC,SAAS,GAAG,GAAG,IAAI,CAACnB,OAAO,UAAU;IAC3C,OAAO,IAAI,CAACH,IAAI,CAACY,IAAI,CAACU,SAAS,EAAE,IAAI,CAAC;EACxC;;AAzCWxB,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAyB,SAAXzB,WAAW;EAAA0B,YAFV;AAAM","names":["HttpHeaders","AuthService","constructor","http","isAuthenticated","checkUrl","authUrl","get","login","username","password","loginUrl","loginData","headers","set","post","subscribe","response","console","log","window","location","href","error","logout","logoutUrl","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\marcel-steven.felix\\HeroAgency\\angular-tour-of-heroes\\src\\app\\auth\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable({ \n  providedIn: 'root'\n})\nexport class AuthService {  \n  private authUrl = 'http://localhost:8080/accounts'\n  \n  constructor(private http: HttpClient) {} \n\n  username: string = '';\n  password: string = '';\n\n  // Check whether the user is logged in and return\n  // true or false\n  isAuthenticated(): Observable<boolean> {\n    const checkUrl = `${this.authUrl}/is-authenticated/`;\n    return this.http.get<boolean>(checkUrl);\n  }\n  \n  // Logs user in by setting 'currentUser' to 'true'\n  login(username: string, password: string) {\n    const loginUrl = `${this.authUrl}/login/`;\n    const loginData = { username: username, password: password };\n  \n    const headers = new HttpHeaders().set('Content-Type', 'application/json'); // Set the Content-Type header\n  \n    return this.http.post(loginUrl, loginData, { headers: headers }).subscribe(\n      (response) => {\n        // Successful login\n        console.log('Login successful:', response);\n        // Redirect the user to the authenticated section of your website\n        window.location.href = '/authenticated-section'; // Replace with your actual URL\n      },\n      (error) => {\n        // Error handling\n        console.error('Login error:', error);\n        // Handle the error and display an appropriate message to the user\n      }\n    );\n  }\n\n  // Call view to log user out\n  logout(): Observable<any> {\n    const logoutUrl = `${this.authUrl}/logout/`;\n    return this.http.post(logoutUrl, null);\n  }\n}\n\n  \n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}