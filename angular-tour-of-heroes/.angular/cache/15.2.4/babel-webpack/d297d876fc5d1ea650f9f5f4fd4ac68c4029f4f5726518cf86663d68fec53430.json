{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./message.service\";\nexport class HeroService {\n  constructor(http, messageService) {\n    this.http = http;\n    this.messageService = messageService;\n    this.heroesUrl = 'http://localhost:8080/heroes/';\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'X-CSRFToken': this.getCookie('csrftoken')\n      })\n    };\n  }\n  log(message) {\n    this.messageService.add(`HeroService: ${message}`);\n  }\n  getCookie(name) {\n    const value = \"; \" + document.cookie;\n    const parts = value.split(\"; \" + name + \"=\");\n    if (parts.length == 2) return parts.pop().split(\";\").shift();\n    return \"\";\n  }\n  getHeroes() {\n    return this.http.get(this.heroesUrl).pipe(tap(_ => this.log('fetched heroes')), catchError(this.handleError('getHeroes', [])));\n  }\n  getHero(id) {\n    const url = `${this.heroesUrl}${id}/`;\n    return this.http.get(url).pipe(tap(_ => this.log(`fetched hero id=${id}`)), catchError(this.handleError(`getHero id=${id}`)));\n  }\n  updateHero(hero) {\n    return this.http.put(`${this.heroesUrl}${hero.id}/`, hero, this.httpOptions).pipe(tap(_ => this.log(`updated hero id=${hero.id}`)), catchError(this.handleError('updateHero')));\n  }\n  addHero(hero) {\n    return this.http.post(this.heroesUrl, hero, this.httpOptions).pipe(tap(newHero => this.log(`added hero w/ id=${newHero.id}`)), catchError(this.handleError('addHero')));\n  }\n  deleteHero(hero) {\n    const id = typeof hero === 'number' ? hero : hero.id;\n    const url = `${this.heroesUrl}${id}/`;\n    return this.http.delete(url, this.httpOptions).pipe(tap(_ => this.log(`deleted hero id=${id}`)), catchError(this.handleError('deleteHero')));\n  }\n  searchHeroes(term) {\n    if (!term.trim()) {\n      return of([]);\n    }\n    return this.http.get(`${this.heroesUrl}?name=${term}`).pipe(tap(x => x.length ? this.log(`found heroes matching \"${term}\"`) : this.log(`no heroes matching \"${term}\"`)), catchError(this.handleError('searchHeroes', [])));\n  }\n}\nHeroService.ɵfac = function HeroService_Factory(t) {\n  return new (t || HeroService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.MessageService));\n};\nHeroService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: HeroService,\n  factory: HeroService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["HttpHeaders","of","catchError","tap","HeroService","constructor","http","messageService","headers","getCookie","log","message","add","name","value","document","cookie","parts","split","length","pop","shift","getHeroes","get","heroesUrl","pipe","_","handleError","getHero","id","url","updateHero","hero","put","httpOptions","addHero","post","newHero","deleteHero","delete","searchHeroes","term","trim","x","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\marcel-steven.felix\\HeroAgency\\angular-tour-of-heroes\\src\\app\\hero.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\n\nimport { Hero } from './hero';\nimport { MessageService } from './message.service';\n\n@Injectable({ providedIn: 'root' })\nexport class HeroService {\n\n  private heroesUrl = 'http://localhost:8080/heroes/';\n\n  httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json',\n      'X-CSRFToken': this.getCookie('csrftoken')\n    })\n  };\n\n  constructor(\n    private http: HttpClient,\n    private messageService: MessageService) { }\n\n  private log(message: string) {\n    this.messageService.add(`HeroService: ${message}`);\n  }\n\n  private getCookie(name: string): string {\n    const value = \"; \" + document.cookie;\n    const parts = value.split(\"; \" + name + \"=\");\n    if (parts.length == 2) return parts.pop()!.split(\";\").shift()!;\n    return \"\";\n  }\n\n  getHeroes(): Observable<Hero[]> {\n    return this.http.get<Hero[]>(this.heroesUrl)\n      .pipe(\n        tap(_ => this.log('fetched heroes')),\n        catchError(this.handleError<Hero[]>('getHeroes', []))\n      );\n  }\n\n  getHero(id: number): Observable<Hero> {\n    const url = `${this.heroesUrl}${id}/`;\n    return this.http.get<Hero>(url)\n      .pipe(\n        tap(_ => this.log(`fetched hero id=${id}`)),\n        catchError(this.handleError<Hero>(`getHero id=${id}`))\n      );\n  }\n\n  updateHero(hero: Hero): Observable<any> {\n    return this.http.put(`${this.heroesUrl}${hero.id}/`, hero, this.httpOptions)\n      .pipe(\n        tap(_ => this.log(`updated hero id=${hero.id}`)),\n        catchError(this.handleError<any>('updateHero'))\n      );\n  }\n\n  addHero(hero: Hero): Observable<Hero> {\n    return this.http.post<Hero>(this.heroesUrl, hero, this.httpOptions)\n      .pipe(\n        tap((newHero: Hero) => this.log(`added hero w/ id=${newHero.id}`)),\n        catchError(this.handleError<Hero>('addHero'))\n      );\n  }\n\n  deleteHero(hero: Hero | number): Observable<Hero> {\n    const id = typeof hero === 'number' ? hero : hero.id;\n    const url = `${this.heroesUrl}${id}/`;\n\n    return this.http.delete<Hero>(url, this.httpOptions)\n      .pipe(\n        tap(_ => this.log(`deleted hero id=${id}`)),\n        catchError(this.handleError<Hero>('deleteHero'))\n      );\n  }\n\n  searchHeroes(term: string): Observable<Hero[]> {\n    if (!term.trim()) {\n      return of([]);\n    }\n    return this.http.get<Hero[]>(`${this.heroesUrl}?name=${term}`).pipe(\n      tap(x => x.length ?\n         this.log(`found heroes matching \"${term}\"`) :\n         this.log(`no heroes matching \"${term}\"`)),\n      catchError(this.handleError<Hero[]>('searchHeroes', []))\n    );\n  }\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}