{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nlet AuthGuard = class AuthGuard {\n  constructor(authService, pop) {\n    this.authService = authService;\n    this.pop = pop;\n  }\n  // If user is authenticated they will be allowed to pass\n  // else it will save the requested url, open a login popup\n  // and after successful login redirect them to requested url\n  canActivate(route, state) {\n    const returnUrl = state.url;\n    const authenticated = this.authService.isAuthenticated();\n    if (authenticated) {\n      return true;\n    } else {\n      return true;\n    }\n  }\n};\nAuthGuard = __decorate([Injectable({\n  providedIn: 'root'\n})], AuthGuard);\nexport { AuthGuard };","map":{"version":3,"mappings":";AAAA,SAASA,UAAU,QAAQ,eAAe;AASnC,IAAMC,SAAS,GAAf,MAAMA,SAAS;EAClBC,YACYC,WAAwB,EACxBC,GAAG;IADH,gBAAW,GAAXD,WAAW;IACX,QAAG,GAAHC,GAAG;EACZ;EAEH;EACA;EACA;EACAC,WAAW,CAACC,KAA6B,EAAEC,KAA0B;IACnE,MAAMC,SAAS,GAAGD,KAAK,CAACE,GAAG;IAC3B,MAAMC,aAAa,GAAG,IAAI,CAACP,WAAW,CAACQ,eAAe,EAAE;IACxD,IAAID,aAAa,EAAE;MACjB,OAAO,IAAI;KACZ,MAAM;MAEL,OAAO,IAAI;;EAEf;CAuBH;AAzCYT,SAAS,eADrBD,UAAU,CAAC;EAAEY,UAAU,EAAE;AAAM,CAAE,CAAC,GACtBX,SAAS,CAyCrB;SAzCYA,SAAS","names":["Injectable","AuthGuard","constructor","authService","pop","canActivate","route","state","returnUrl","url","authenticated","isAuthenticated","providedIn"],"sourceRoot":"","sources":["C:\\Users\\marcel-steven.felix\\angular-tour-of-heroes\\src\\app\\auth.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Router, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\n\nimport { AuthService } from './auth/auth.service';\nimport { LoginComponent } from './login/login.component';\nimport { MatDialog} from '@angular/material/dialog';\n\n\n@Injectable({ providedIn: 'root' })\nexport class AuthGuard {\n    constructor(\n        private authService: AuthService,\n        private pop\n    ) {}\n\n    // If user is authenticated they will be allowed to pass\n    // else it will save the requested url, open a login popup\n    // and after successful login redirect them to requested url\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n      const returnUrl = state.url;\n      const authenticated = this.authService.isAuthenticated();\n      if (authenticated) {\n        return true;\n      } else {\n        \n        return true\n      }\n    }\n\n    /*\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n      const returnUrl = state.url;\n      const authenticated = this.authService.isAuthenticated();\n      if (authenticated) {\n        return true;\n      } else {\n          const dialogRef = this.dialog.open(LoginComponent, {\n            disableClose: true\n          });\n          return dialogRef.afterClosed().toPromise().then(result => {\n            if (result) {                 \n              this.router.navigateByUrl(returnUrl);\n              return true;\n            } else {\n              return false;\n            }\n          });\n        }\n    }\n    */\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}