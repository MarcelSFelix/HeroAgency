{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { tap } from 'rxjs/operators';\nlet AuthGuard = class AuthGuard {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  canActivate(route, state) {\n    return this.authService.isAuthenticated().pipe(tap(isAuthenticated => {\n      if (!isAuthenticated) {\n        this.router.navigate(['/login'], {\n          queryParams: {\n            returnUrl: state.url\n          }\n        });\n      }\n    }));\n  }\n};\nAuthGuard = __decorate([Injectable()], AuthGuard);\nexport { AuthGuard };","map":{"version":3,"mappings":";AAAA,SAASA,UAAU,QAAQ,eAAe;AAI1C,SAASC,GAAG,QAAQ,gBAAgB;AAG7B,IAAMC,SAAS,GAAf,MAAMA,SAAS;EACpBC,YAAoBC,WAAwB,EAAUC,MAAc;IAAhD,gBAAW,GAAXD,WAAW;IAAuB,WAAM,GAANC,MAAM;EAAW;EAEvEC,WAAW,CAACC,KAA6B,EAAEC,KAA0B;IACnE,OAAO,IAAI,CAACJ,WAAW,CAACK,eAAe,EAAE,CAACC,IAAI,CAC5CT,GAAG,CAACQ,eAAe,IAAG;MACpB,IAAI,CAACA,eAAe,EAAE;QACpB,IAAI,CAACJ,MAAM,CAACM,QAAQ,CAAC,CAAC,QAAQ,CAAC,EAAE;UAAEC,WAAW,EAAE;YAAEC,SAAS,EAAEL,KAAK,CAACM;UAAG;QAAE,CAAC,CAAC;;IAE9E,CAAC,CAAC,CACH;EACH;CACD;AAZYZ,SAAS,eADrBF,UAAU,EAAE,GACAE,SAAS,CAYrB;SAZYA,SAAS","names":["Injectable","tap","AuthGuard","constructor","authService","router","canActivate","route","state","isAuthenticated","pipe","navigate","queryParams","returnUrl","url"],"sourceRoot":"","sources":["C:\\Users\\marcel-steven.felix\\HeroAgency\\angular-tour-of-heroes\\src\\app\\auth.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { CanActivate, Router, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { AuthService } from './auth.service';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Injectable()\nexport class AuthGuard implements CanActivate {\n  constructor(private authService: AuthService, private router: Router) {}\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> {\n    return this.authService.isAuthenticated().pipe(\n      tap(isAuthenticated => {\n        if (!isAuthenticated) {\n          this.router.navigate(['/login'], { queryParams: { returnUrl: state.url }});\n        }\n      })\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}