{"ast":null,"code":"import { MatDialogConfig } from \"@angular/material/dialog\";\nimport { PopupComponent } from '../popup/popup.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth.service\";\nimport * as i2 from \"@angular/material/dialog\";\nexport class AuthGuardService {\n  constructor(auth, dialog) {\n    this.auth = auth;\n    this.dialog = dialog;\n  }\n  canActivate(route, state) {\n    // Check if user is authenticated\n    const authenticated = localStorage.getItem('currentUser');\n    if (authenticated) {\n      return true; // User is authenticated, allow access to the protected route\n    } else {\n      // User is not authenticated, open login dialog and wait for user to log in\n      const dialogRef = this.dialog.open(PopupComponent, {\n        width: '300px',\n        disableClose: true,\n        autoFocus: true\n      });\n      return dialogRef.componentInstance.loggedIn; // Wait for user to log in before allowing access to the protected route\n    }\n  }\n\n  openDialog() {\n    const dialogConfig = new MatDialogConfig();\n    dialogConfig.disableClose = true;\n    dialogConfig.autoFocus = true;\n    dialogConfig.data = {\n      id: 1,\n      title: 'Angular For Beginners'\n    };\n    const dialogRef = this.dialog.open(PopupComponent, dialogConfig);\n    dialogRef.afterClosed().subscribe(result => {\n      console.log('The dialog was closed');\n    });\n  }\n}\nAuthGuardService.ɵfac = function AuthGuardService_Factory(t) {\n  return new (t || AuthGuardService)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.MatDialog));\n};\nAuthGuardService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthGuardService,\n  factory: AuthGuardService.ɵfac\n});","map":{"version":3,"mappings":"AAMA,SAAmBA,eAAe,QAAO,0BAA0B;AACnE,SAASC,cAAc,QAAQ,0BAA0B;;;;AAGzD,OAAM,MAAOC,gBAAgB;EAC3BC,YAAmBC,IAAiB,EAAUC,MAAiB;IAA5C,SAAI,GAAJD,IAAI;IAAuB,WAAM,GAANC,MAAM;EAAc;EAElEC,WAAW,CACTC,KAA6B,EAC7BC,KAA0B;IAE1B;IACA,MAAMC,aAAa,GAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;IACzD,IAAIF,aAAa,EAAE;MACjB,OAAO,IAAI,CAAC,CAAC;KACd,MAAM;MACL;MACA,MAAMG,SAAS,GAAG,IAAI,CAACP,MAAM,CAACQ,IAAI,CAACZ,cAAc,EAAE;QACjDa,KAAK,EAAE,OAAO;QACdC,YAAY,EAAE,IAAI;QAClBC,SAAS,EAAE;OACZ,CAAC;MAEF,OAAOJ,SAAS,CAACK,iBAAiB,CAACC,QAAQ,CAAC,CAAC;;EAEjD;;EAEAC,UAAU;IACR,MAAMC,YAAY,GAAG,IAAIpB,eAAe,EAAE;IAEtCoB,YAAY,CAACL,YAAY,GAAG,IAAI;IAChCK,YAAY,CAACJ,SAAS,GAAG,IAAI;IAE7BI,YAAY,CAACC,IAAI,GAAG;MAClBC,EAAE,EAAE,CAAC;MACLC,KAAK,EAAE;KACR;IAED,MAAMX,SAAS,GAAG,IAAI,CAACP,MAAM,CAACQ,IAAI,CAACZ,cAAc,EAAEmB,YAAY,CAAC;IAEhER,SAAS,CAACY,WAAW,EAAE,CAACC,SAAS,CAACC,MAAM,IAAG;MACzCC,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;IACtC,CAAC,CAAC;EACR;;AAvCW1B,gBAAgB;mBAAhBA,gBAAgB;AAAA;AAAhBA,gBAAgB;SAAhBA,gBAAgB;EAAA2B,SAAhB3B,gBAAgB;AAAA","names":["MatDialogConfig","PopupComponent","AuthGuardService","constructor","auth","dialog","canActivate","route","state","authenticated","localStorage","getItem","dialogRef","open","width","disableClose","autoFocus","componentInstance","loggedIn","openDialog","dialogConfig","data","id","title","afterClosed","subscribe","result","console","log","factory"],"sourceRoot":"","sources":["C:\\Users\\marcel-steven.felix\\angular-tour-of-heroes\\src\\app\\auth\\auth-guard.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { AuthService } from './auth.service';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { Observable } from 'rxjs';\n\n\nimport {MatDialog, MatDialogConfig} from \"@angular/material/dialog\";\nimport { PopupComponent } from '../popup/popup.component';\n\n@Injectable()\nexport class AuthGuardService implements CanActivate {\n  constructor(public auth: AuthService, private dialog: MatDialog) {}\n  \n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n\n    // Check if user is authenticated\n    const authenticated = localStorage.getItem('currentUser')\n    if (authenticated) {\n      return true; // User is authenticated, allow access to the protected route\n    } else {\n      // User is not authenticated, open login dialog and wait for user to log in\n      const dialogRef = this.dialog.open(PopupComponent, {\n        width: '300px',\n        disableClose: true, // Prevents user from closing dialog by clicking outside or pressing escape\n        autoFocus: true\n      });\n\n      return dialogRef.componentInstance.loggedIn; // Wait for user to log in before allowing access to the protected route\n    }\n  }\n  \n  openDialog() {\n    const dialogConfig = new MatDialogConfig();\n\n        dialogConfig.disableClose = true;\n        dialogConfig.autoFocus = true;\n\n        dialogConfig.data = {\n          id: 1,\n          title: 'Angular For Beginners'\n        };\n\n        const dialogRef = this.dialog.open(PopupComponent, dialogConfig);\n\n        dialogRef.afterClosed().subscribe(result => {\n          console.log('The dialog was closed');\n        });\n  }\n  \n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}