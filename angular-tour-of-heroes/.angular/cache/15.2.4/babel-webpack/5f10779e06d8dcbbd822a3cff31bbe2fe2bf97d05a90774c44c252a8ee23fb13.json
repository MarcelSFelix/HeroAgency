{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.authUrl = 'http://localhost:8080/accounts/';\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      }),\n      withCredentials: true\n    };\n    this.username = '';\n    this.password = '';\n  }\n  // Check whether the user is logged in and return\n  // true or false\n  isAuthenticated() {\n    const loggedIn = localStorage.getItem('loggedIn');\n    return loggedIn === 'true';\n  }\n  // Logs user in by setting 'currentUser' to 'true'\n  login(username, password) {\n    const loginUrl = `${this.authUrl}login/`;\n    const loginData = {\n      username: username,\n      password: password\n    };\n    const headers = new HttpHeaders().set('Content-Type', 'application/json');\n    return this.http.post(loginUrl, loginData, this.httpOptions);\n  }\n  logout() {\n    const logoutUrl = `${this.authUrl}logout/`;\n    conso;\n    console.log(logoutUrl);\n    return this.http.post(logoutUrl, {}, this.httpOptions);\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;;;AAM9D,OAAM,MAAOC,WAAW;EAOtBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IANhB,YAAO,GAAG,iCAAiC;IACnD,gBAAW,GAAG;MACZC,OAAO,EAAE,IAAIJ,WAAW,CAAC;QAAE,cAAc,EAAE;MAAkB,CAAE,CAAC;MAChEK,eAAe,EAAE;KAClB;IAID,aAAQ,GAAW,EAAE;IACrB,aAAQ,GAAW,EAAE;EAHkB;EAKvC;EACA;EACOC,eAAe;IACpB,MAAMC,QAAQ,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;IACjD,OAAOF,QAAQ,KAAK,MAAM;EAC5B;EAEA;EACAG,KAAK,CAACC,QAAgB,EAAEC,QAAgB;IACtC,MAAMC,QAAQ,GAAG,GAAG,IAAI,CAACC,OAAO,QAAQ;IACxC,MAAMC,SAAS,GAAG;MAAEJ,QAAQ,EAAEA,QAAQ;MAAEC,QAAQ,EAAEA;IAAQ,CAAE;IAC5D,MAAMR,OAAO,GAAG,IAAIJ,WAAW,EAAE,CAACgB,GAAG,CAAC,cAAc,EAAE,kBAAkB,CAAC;IAEzE,OAAO,IAAI,CAACb,IAAI,CAACc,IAAI,CAACJ,QAAQ,EAAEE,SAAS,EAAE,IAAI,CAACG,WAAW,CAAC;EAC9D;EAIAC,MAAM;IACJ,MAAMC,SAAS,GAAG,GAAG,IAAI,CAACN,OAAO,SAAS;IAC1CO,KAAK;IACLC,OAAO,CAACC,GAAG,CAACH,SAAS,CAAC;IACtB,OAAO,IAAI,CAACjB,IAAI,CAACc,IAAI,CAACG,SAAS,EAAE,EAAE,EAAE,IAAI,CAACF,WAAW,CAAC;EACxD;;AAnCWjB,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAuB,SAAXvB,WAAW;EAAAwB,YAFV;AAAM","names":["HttpHeaders","AuthService","constructor","http","headers","withCredentials","isAuthenticated","loggedIn","localStorage","getItem","login","username","password","loginUrl","authUrl","loginData","set","post","httpOptions","logout","logoutUrl","conso","console","log","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\marcel-steven.felix\\HeroAgency\\angular-tour-of-heroes\\src\\app\\auth\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, map } from 'rxjs';\n\n@Injectable({ \n  providedIn: 'root'\n})\nexport class AuthService {  \n  private authUrl = 'http://localhost:8080/accounts/'\n  httpOptions = {\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' }),\n    withCredentials: true\n  };\n\n  constructor(private http: HttpClient) {} \n\n  username: string = '';\n  password: string = '';\n\n  // Check whether the user is logged in and return\n  // true or false\n  public isAuthenticated(): boolean {\n    const loggedIn = localStorage.getItem('loggedIn');\n    return loggedIn === 'true';\n  }\n  \n  // Logs user in by setting 'currentUser' to 'true'\n  login(username: string, password: string): Observable<any> {\n    const loginUrl = `${this.authUrl}login/`;\n    const loginData = { username: username, password: password };\n    const headers = new HttpHeaders().set('Content-Type', 'application/json');\n  \n    return this.http.post(loginUrl, loginData, this.httpOptions);\n  }\n\n  \n\n  logout(): Observable<any> {\n    const logoutUrl = `${this.authUrl}logout/`;\n    conso\n    console.log(logoutUrl)\n    return this.http.post(logoutUrl, {}, this.httpOptions);\n  }\n}\n\n  \n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}