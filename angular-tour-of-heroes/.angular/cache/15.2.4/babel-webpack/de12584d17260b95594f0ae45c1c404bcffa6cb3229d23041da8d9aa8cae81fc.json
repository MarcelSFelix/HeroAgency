{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nlet AuthGuard = class AuthGuard {\n  constructor(router, accountService) {\n    this.router = router;\n    this.accountService = accountService;\n  }\n  canActivate(route, state) {\n    const user = this.accountService.userValue;\n    if (user) {\n      // authorised so return true\n      return true;\n    }\n    // not logged in so redirect to login page with the return url\n    this.router.navigate(['/login'], {\n      queryParams: {\n        returnUrl: state.url\n      }\n    });\n    return false;\n  }\n};\nAuthGuard = __decorate([Injectable({\n  providedIn: 'root'\n})], AuthGuard);\nexport { AuthGuard };","map":{"version":3,"mappings":";AAAA,SAASA,UAAU,QAAQ,eAAe;AAMnC,IAAMC,SAAS,GAAf,MAAMA,SAAS;EAClBC,YACYC,MAAc,EACdC,cAA8B;IAD9B,WAAM,GAAND,MAAM;IACN,mBAAc,GAAdC,cAAc;EACvB;EAEHC,WAAW,CAACC,KAA6B,EAAEC,KAA0B;IACjE,MAAMC,IAAI,GAAG,IAAI,CAACJ,cAAc,CAACK,SAAS;IAC1C,IAAID,IAAI,EAAE;MACN;MACA,OAAO,IAAI;;IAGf;IACA,IAAI,CAACL,MAAM,CAACO,QAAQ,CAAC,CAAC,QAAQ,CAAC,EAAE;MAAEC,WAAW,EAAE;QAAEC,SAAS,EAAEL,KAAK,CAACM;MAAG;IAAE,CAAC,CAAC;IAC1E,OAAO,KAAK;EAChB;CACH;AAjBYZ,SAAS,eADrBD,UAAU,CAAC;EAAEc,UAAU,EAAE;AAAM,CAAE,CAAC,GACtBb,SAAS,CAiBrB;SAjBYA,SAAS","names":["Injectable","AuthGuard","constructor","router","accountService","canActivate","route","state","user","userValue","navigate","queryParams","returnUrl","url","providedIn"],"sourceRoot":"","sources":["C:\\Users\\marcel-steven.felix\\angular-tour-of-heroes\\src\\app\\auth.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Router, CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\n\nimport { AuthService } from './auth/auth.service';\n\n@Injectable({ providedIn: 'root' })\nexport class AuthGuard implements CanActivate {\n    constructor(\n        private router: Router,\n        private accountService: AccountService\n    ) {}\n\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n        const user = this.accountService.userValue;\n        if (user) {\n            // authorised so return true\n            return true;\n        }\n\n        // not logged in so redirect to login page with the return url\n        this.router.navigate(['/login'], { queryParams: { returnUrl: state.url }});\n        return false;\n    }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}