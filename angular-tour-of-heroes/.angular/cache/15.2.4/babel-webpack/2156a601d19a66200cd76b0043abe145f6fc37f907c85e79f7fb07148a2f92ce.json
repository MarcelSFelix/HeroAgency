{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"./auth/auth.service\";\nexport class AuthGuard {\n  constructor(router, authService) {\n    this.router = router;\n    this.authService = authService;\n  }\n  canActivate(route, state) {\n    return this.authService.isAuthenticated().pipe(map(authenticated => {\n      if (authenticated) {\n        return true;\n      }\n      this.router.navigate(['/login'], {\n        queryParams: {\n          returnUrl: state.url\n        }\n      });\n      return false;\n    }));\n  }\n}\nAuthGuard.ɵfac = function AuthGuard_Factory(t) {\n  return new (t || AuthGuard)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.AuthService));\n};\nAuthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthGuard,\n  factory: AuthGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAASA,GAAG,QAAQ,gBAAgB;;;;AAKpC,OAAM,MAAOC,SAAS;EACpBC,YACUC,MAAc,EACdC,WAAwB;IADxB,WAAM,GAAND,MAAM;IACN,gBAAW,GAAXC,WAAW;EAClB;EAEHC,WAAW,CAACC,KAA6B,EAAEC,KAA0B;IACnE,OAAO,IAAI,CAACH,WAAW,CAACI,eAAe,EAAE,CAACC,IAAI,CAC5CT,GAAG,CAAEU,aAAsB,IAAI;MAC7B,IAAIA,aAAa,EAAE;QACjB,OAAO,IAAI;;MAEb,IAAI,CAACP,MAAM,CAACQ,QAAQ,CAAC,CAAC,QAAQ,CAAC,EAAE;QAAEC,WAAW,EAAE;UAAEC,SAAS,EAAEN,KAAK,CAACO;QAAG;MAAE,CAAC,CAAC;MAC1E,OAAO,KAAK;IACd,CAAC,CAAC,CACH;EACH;;AAhBWb,SAAS;mBAATA,SAAS;AAAA;AAATA,SAAS;SAATA,SAAS;EAAAc,SAATd,SAAS;EAAAe,YADI;AAAM","names":["map","AuthGuard","constructor","router","authService","canActivate","route","state","isAuthenticated","pipe","authenticated","navigate","queryParams","returnUrl","url","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\marcel-steven.felix\\HeroAgency\\angular-tour-of-heroes\\src\\app\\auth.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Router, RouterStateSnapshot, ActivatedRouteSnapshot } from '@angular/router';\nimport { map } from 'rxjs/operators';\n\nimport { AuthService } from './auth/auth.service';\n\n@Injectable({ providedIn: 'root' })\nexport class AuthGuard {\n  constructor(\n    private router: Router,\n    private authService: AuthService\n  ) {}\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n    return this.authService.isAuthenticated().pipe(\n      map((authenticated: boolean) => {\n        if (authenticated) {\n          return true;\n        }\n        this.router.navigate(['/login'], { queryParams: { returnUrl: state.url }});\n        return false;\n      })\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}