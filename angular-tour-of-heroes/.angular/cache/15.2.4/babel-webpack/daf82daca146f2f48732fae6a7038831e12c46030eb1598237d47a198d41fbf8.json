{"ast":null,"code":"import { map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"./auth/auth.service\";\nexport class AuthGuard {\n  constructor(router, authService) {\n    this.router = router;\n    this.authService = authService;\n  }\n  // If user is authenticated they will be allowed to pass\n  // else it will save the requested url, redirect to loginopen a login popup\n  // and after successful login redirect them to requested url\n  //IMPORTANT:\n  //route: ActivatedRouteSnapshot is not used BUT NEEDED to access queryParams\n  // TODO This is being called in a loop\n  canActivate(route, state) {\n    return this.authService.isAuthenticated().pipe(map(isAuthenticated => {\n      if (isAuthenticated) {\n        return true; // User is authenticated, allow navigation\n      } else {\n        this.router.navigate(['/login'], {\n          queryParams: {\n            returnUrl: state.url\n          }\n        });\n        return false; // User is not authenticated, prevent navigation\n      }\n    }));\n  }\n}\n\nAuthGuard.ɵfac = function AuthGuard_Factory(t) {\n  return new (t || AuthGuard)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.AuthService));\n};\nAuthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthGuard,\n  factory: AuthGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAKA,SAASA,GAAG,QAAoB,MAAM;;;;AAItC,OAAM,MAAOC,SAAS;EAClBC,YACUC,MAAc,EACdC,WAAwB;IADxB,WAAM,GAAND,MAAM;IACN,gBAAW,GAAXC,WAAW;EAClB;EAEH;EACA;EACA;EACA;EACA;EAGA;EACAC,WAAW,CAACC,KAA6B,EAAEC,KAA0B;IACnE,OAAO,IAAI,CAACH,WAAW,CAACI,eAAe,EAAE,CAACC,IAAI,CAC5CT,GAAG,CAAEQ,eAAwB,IAAI;MAC/B,IAAIA,eAAe,EAAE;QACnB,OAAO,IAAI,CAAC,CAAC;OACd,MAAM;QACL,IAAI,CAACL,MAAM,CAACO,QAAQ,CAAC,CAAC,QAAQ,CAAC,EAAE;UAAEC,WAAW,EAAE;YAAEC,SAAS,EAAEL,KAAK,CAACM;UAAG;QAAE,CAAE,CAAC;QAC3E,OAAO,KAAK,CAAC,CAAC;;IAElB,CAAC,CAAC,CACH;EACH;;;AAzBSZ,SAAS;mBAATA,SAAS;AAAA;AAATA,SAAS;SAATA,SAAS;EAAAa,SAATb,SAAS;EAAAc,YADI;AAAM","names":["map","AuthGuard","constructor","router","authService","canActivate","route","state","isAuthenticated","pipe","navigate","queryParams","returnUrl","url","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\marcel-steven.felix\\HeroAgency\\angular-tour-of-heroes\\src\\app\\auth.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Router, RouterStateSnapshot, ActivatedRouteSnapshot } from '@angular/router';\n\nimport { AuthService } from './auth/auth.service';\n\nimport { map, Observable } from 'rxjs';\n\n\n@Injectable({ providedIn: 'root' })\nexport class AuthGuard {\n    constructor(\n      private router: Router,\n      private authService: AuthService,\n    ) {}\n\n    // If user is authenticated they will be allowed to pass\n    // else it will save the requested url, redirect to loginopen a login popup\n    // and after successful login redirect them to requested url\n    //IMPORTANT:\n    //route: ActivatedRouteSnapshot is not used BUT NEEDED to access queryParams\n    \n    \n    // TODO This is being called in a loop\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> {\n      return this.authService.isAuthenticated().pipe(\n        map((isAuthenticated: boolean) => {\n          if (isAuthenticated) {\n            return true; // User is authenticated, allow navigation\n          } else {\n            this.router.navigate(['/login'], { queryParams: { returnUrl: state.url } });\n            return false; // User is not authenticated, prevent navigation\n          }\n        })\n      );\n    }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}