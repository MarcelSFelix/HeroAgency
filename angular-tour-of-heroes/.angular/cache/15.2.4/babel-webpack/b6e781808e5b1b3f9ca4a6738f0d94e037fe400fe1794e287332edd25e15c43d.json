{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./message.service\";\nimport * as i3 from \"./csrf-token.service\";\nexport class HeroService {\n  constructor(http, messageService, csrfTokenService) {\n    this.http = http;\n    this.messageService = messageService;\n    this.csrfTokenService = csrfTokenService;\n    this.heroesUrl = 'http://localhost:8080/heroes/'; // URL to web api\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n  }\n  /** GET heroes from the server */\n  getHeroes() {\n    const url = this.heroesUrl;\n    const options = {\n      ...this.httpOptions,\n      headers: this.appendCsrfToken\n    };\n    return this.http.get(url, options).pipe(tap(_ => this.log('fetched heroes')), catchError(this.handleError('getHeroes', [])));\n  }\n  /** GET hero by id. Return `undefined` when id not found */\n  getHeroNo404(id) {\n    const url = `${this.heroesUrl}/?id=${id}`;\n    return this.http.get(url).pipe(map(heroes => heroes[0]),\n    // returns a {0|1} element array\n    tap(h => {\n      const outcome = h ? 'fetched' : 'did not find';\n      this.log(`${outcome} hero id=${id}`);\n    }), catchError(this.handleError(`getHero id=${id}`)));\n  }\n  /** GET hero by id. Will 404 if id not found */\n  getHero(id) {\n    const url = `${this.heroesUrl}${id}`;\n    return this.http.get(url).pipe(tap(_ => this.log(`fetched hero id=${id}`)), catchError(this.handleError(`getHero id=${id}`)));\n  }\n  /* GET heroes whose name contains search term */\n  searchHeroes(term) {\n    if (!term.trim()) {\n      // if not search term, return empty hero array.\n      return of([]);\n    }\n    return this.http.get(`${this.heroesUrl}/?name=${term}`).pipe(tap(x => x.length ? this.log(`found heroes matching \"${term}\"`) : this.log(`no heroes matching \"${term}\"`)), catchError(this.handleError('searchHeroes', [])));\n  }\n  //////// Save methods //////////\n  /** POST: add a new hero to the server */\n  addHero(hero) {\n    const url = `${this.heroesUrl}new/`;\n    const options = {\n      ...this.httpOptions,\n      headers: this.appendCsrfToken\n    };\n    return this.http.post(url, hero, options).pipe(tap(newHero => this.log(`added hero w/ id=${newHero.id}`)), catchError(this.handleError('addHero')));\n  }\n  /** DELETE: delete the hero from the server */\n  deleteHero(id) {\n    const url = `${this.heroesUrl}${id}/delete/`;\n    const headers = this.appendCsrfToken(this.httpOptions.headers);\n    const options = {\n      ...this.httpOptions,\n      headers,\n      withCredentials: true\n    };\n    return this.http.delete(url, options).pipe(tap(_ => this.log(`deleted hero id=${id}`)), catchError(this.handleError('deleteHero')));\n  }\n  /** PUT: update the hero on the server */\n  updateHero(hero) {\n    const url = `${this.heroesUrl}${hero.id}/edit/`;\n    const headers = this.appendCsrfToken(this.httpOptions.headers);\n    const options = {\n      ...this.httpOptions,\n      headers\n    };\n    return this.http.put(url, hero, options).pipe(tap(_ => this.log(`updated hero id=${hero.id}`)), catchError(this.handleError('updateHero')));\n  }\n  /**\r\n   * Handle Http operation that failed.\r\n   * Let the app continue.\r\n   *\r\n   * @param operation - name of the operation that failed\r\n   * @param result - optional value to return as the observable result\r\n   */\n  handleError(operation = 'operation', result) {\n    return error => {\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n      // TODO: better job of transforming error for user consumption\n      this.log(`${operation} failed: ${error.message}`);\n      // Let the app keep running by returning an empty result.\n      return of(result);\n    };\n  }\n  /** Log a HeroService message with the MessageService */\n  log(message) {\n    this.messageService.add(`HeroService: ${message}`);\n  }\n  /**\r\n   * Append CSRF token to the headers.\r\n   * @param headers The original headers object.\r\n   * @returns The modified headers object with the CSRF token.\r\n   */\n  appendCsrfToken(headers) {\n    const csrfToken = this.csrfTokenService.getCsrfToken();\n    if (csrfToken) {\n      return headers.append('X-CSRFToken', csrfToken);\n    }\n    return headers;\n  }\n}\nHeroService.ɵfac = function HeroService_Factory(t) {\n  return new (t || HeroService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.MessageService), i0.ɵɵinject(i3.CsrfTokenService));\n};\nHeroService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: HeroService,\n  factory: HeroService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["HttpHeaders","of","catchError","map","tap","HeroService","constructor","http","messageService","csrfTokenService","headers","getHeroes","url","heroesUrl","options","httpOptions","appendCsrfToken","get","pipe","_","log","handleError","getHeroNo404","id","heroes","h","outcome","getHero","searchHeroes","term","trim","x","length","addHero","hero","post","newHero","deleteHero","withCredentials","delete","updateHero","put","operation","result","error","console","message","add","csrfToken","getCsrfToken","append","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\marcel-steven.felix\\HeroAgency\\angular-tour-of-heroes\\src\\app\\hero.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\n\nimport { Hero } from './hero';\nimport { MessageService } from './message.service';\nimport { CsrfTokenService } from './csrf-token.service';\n\n\n@Injectable({ providedIn: 'root' })\nexport class HeroService {\n\n  private heroesUrl = 'http://localhost:8080/heroes/';  // URL to web api\n\n  httpOptions = {\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' }),\n  };\n\n  constructor(\n    private http: HttpClient,\n    private messageService: MessageService,\n    private csrfTokenService: CsrfTokenService) { }\n\n  /** GET heroes from the server */\n  getHeroes(): Observable<Hero[]> {\n    const url = this.heroesUrl;\n    const options = { ...this.httpOptions, headers: this.appendCsrfToken };\n\n    return this.http.get<Hero[]>(url, options)\n      .pipe(\n        tap(_ => this.log('fetched heroes')),\n        catchError(this.handleError<Hero[]>('getHeroes', []))\n      );\n  }\n\n  /** GET hero by id. Return `undefined` when id not found */\n  getHeroNo404<Data>(id: number): Observable<Hero> {\n    const url = `${this.heroesUrl}/?id=${id}`;\n    return this.http.get<Hero[]>(url)\n      .pipe(\n        map(heroes => heroes[0]), // returns a {0|1} element array\n        tap(h => {\n          const outcome = h ? 'fetched' : 'did not find';\n          this.log(`${outcome} hero id=${id}`);\n        }),\n        catchError(this.handleError<Hero>(`getHero id=${id}`))\n      );\n  }\n\n  /** GET hero by id. Will 404 if id not found */\n  \n  getHero(id: number): Observable<Hero> {\n    const url = `${this.heroesUrl}${id}`;\n    return this.http.get<Hero>(url).pipe(\n      tap(_ => this.log(`fetched hero id=${id}`)),\n      catchError(this.handleError<Hero>(`getHero id=${id}`))\n    );\n  }\n\n  /* GET heroes whose name contains search term */\n  searchHeroes(term: string): Observable<Hero[]> {\n    if (!term.trim()) {\n      // if not search term, return empty hero array.\n      return of([]);\n    }\n    return this.http.get<Hero[]>(`${this.heroesUrl}/?name=${term}`).pipe(\n      tap(x => x.length ?\n         this.log(`found heroes matching \"${term}\"`) :\n         this.log(`no heroes matching \"${term}\"`)),\n      catchError(this.handleError<Hero[]>('searchHeroes', []))\n    );\n  }\n\n  //////// Save methods //////////\n\n  /** POST: add a new hero to the server */\n  addHero(hero: Hero): Observable<Hero> {\n    const url = `${this.heroesUrl}new/`;\n    const options = { ...this.httpOptions, headers: this.appendCsrfToken };\n\n    return this.http.post<Hero>(url, hero, options).pipe(\n      tap((newHero: Hero) => this.log(`added hero w/ id=${newHero.id}`)),\n      catchError(this.handleError<Hero>('addHero'))\n    );\n  }\n\n  /** DELETE: delete the hero from the server */\n  deleteHero(id: number): Observable<Hero> {\n    const url = `${this.heroesUrl}${id}/delete/`;\n    const headers = this.appendCsrfToken(this.httpOptions.headers);\n    const options = { ...this.httpOptions, headers, withCredentials: true };\n\n    return this.http.delete<Hero>(url, options).pipe(\n      tap(_ => this.log(`deleted hero id=${id}`)),\n      catchError(this.handleError<Hero>('deleteHero'))\n    );\n  }\n\n  /** PUT: update the hero on the server */\n  updateHero(hero: Hero): Observable<any> {\n    const url = `${this.heroesUrl}${hero.id}/edit/`;\n    const headers = this.appendCsrfToken(this.httpOptions.headers);\n    const options = { ...this.httpOptions, headers };\n\n    return this.http.put(url, hero, options).pipe(\n      tap(_ => this.log(`updated hero id=${hero.id}`)),\n      catchError(this.handleError<any>('updateHero'))\n    );\n  }\n\n  /**\n   * Handle Http operation that failed.\n   * Let the app continue.\n   *\n   * @param operation - name of the operation that failed\n   * @param result - optional value to return as the observable result\n   */\n  private handleError<T>(operation = 'operation', result?: T) {\n    return (error: any): Observable<T> => {\n\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n\n      // TODO: better job of transforming error for user consumption\n      this.log(`${operation} failed: ${error.message}`);\n\n      // Let the app keep running by returning an empty result.\n      return of(result as T);\n    };\n  }\n\n  /** Log a HeroService message with the MessageService */\n  private log(message: string) {\n    this.messageService.add(`HeroService: ${message}`);\n  }\n\n  /**\n   * Append CSRF token to the headers.\n   * @param headers The original headers object.\n   * @returns The modified headers object with the CSRF token.\n   */\n  private appendCsrfToken(headers: HttpHeaders): HttpHeaders {\n    const csrfToken = this.csrfTokenService.getCsrfToken();\n    if (csrfToken) {\n      return headers.append('X-CSRFToken', csrfToken);\n    }\n    return headers;\n  }\n  \n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}