{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"./auth/auth.service\";\nexport class AuthGuard {\n  constructor(router, authService) {\n    this.router = router;\n    this.authService = authService;\n  }\n  // If user is authenticated they will be allowed to pass\n  // else it will save the requested url, redirect to loginopen a login popup\n  // and after successful login redirect them to requested url\n  //IMPORTANT:\n  //route: ActivatedRouteSnapshot is not used BUT NEEDED to access queryParams\n  canActivate(route, state) {\n    if (this.authService.isAuthenticated()) {\n      return true;\n    } else {\n      this.router.navigate(['/login'], {\n        queryParams: {\n          returnUrl: state.url\n        }\n      });\n      return false;\n    }\n    // const authenticated = this.authService.isAuthenticated();\n    // if (authenticated === true) {\n    //   return true;\n    // }\n    // this.router.navigate(['/login'], { queryParams: { returnUrl: state.url }});\n    // return false;\n  }\n}\n\nAuthGuard.ɵfac = function AuthGuard_Factory(t) {\n  return new (t || AuthGuard)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.AuthService));\n};\nAuthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthGuard,\n  factory: AuthGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;AAOA,OAAM,MAAOA,SAAS;EAClBC,YACUC,MAAc,EACdC,WAAwB;IADxB,WAAM,GAAND,MAAM;IACN,gBAAW,GAAXC,WAAW;EAClB;EAEH;EACA;EACA;EACA;EACA;EACAC,WAAW,CAACC,KAA6B,EAAEC,KAA0B;IACnE,IAAI,IAAI,CAACH,WAAW,CAACI,eAAe,EAAE,EAAE;MACtC,OAAO,IAAI;KACZ,MAAM;MACL,IAAI,CAACL,MAAM,CAACM,QAAQ,CAAC,CAAC,QAAQ,CAAC,EAAE;QAAEC,WAAW,EAAE;UAAEC,SAAS,EAAEJ,KAAK,CAACK;QAAG;MAAE,CAAC,CAAC;MAC1E,OAAO,KAAK;;IAEd;IACA;IACA;IACA;IACA;IACA;EAEF;;;AAzBSX,SAAS;mBAATA,SAAS;AAAA;AAATA,SAAS;SAATA,SAAS;EAAAY,SAATZ,SAAS;EAAAa,YADI;AAAM","names":["AuthGuard","constructor","router","authService","canActivate","route","state","isAuthenticated","navigate","queryParams","returnUrl","url","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\marcel-steven.felix\\HeroAgency\\angular-tour-of-heroes\\src\\app\\auth.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Router, RouterStateSnapshot, ActivatedRouteSnapshot } from '@angular/router';\n\nimport { AuthService } from './auth/auth.service';\n\n\n@Injectable({ providedIn: 'root' })\nexport class AuthGuard {\n    constructor(\n      private router: Router,\n      private authService: AuthService,\n    ) {}\n\n    // If user is authenticated they will be allowed to pass\n    // else it will save the requested url, redirect to loginopen a login popup\n    // and after successful login redirect them to requested url\n    //IMPORTANT:\n    //route: ActivatedRouteSnapshot is not used BUT NEEDED to access queryParams\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n      if (this.authService.isAuthenticated()) {\n        return true;\n      } else {\n        this.router.navigate(['/login'], { queryParams: { returnUrl: state.url }});\n        return false\n      }\n      // const authenticated = this.authService.isAuthenticated();\n      // if (authenticated === true) {\n      //   return true;\n      // }\n      // this.router.navigate(['/login'], { queryParams: { returnUrl: state.url }});\n      // return false;\n      \n    }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}