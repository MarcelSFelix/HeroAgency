{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport class AuthService {\n  constructor(router) {\n    this.router = router;\n    this.username = '';\n    this.password = '';\n    this.previousUrl = '';\n  }\n  // Check whether the user is logged in and return\n  // true or false\n  isAuthenticated() {\n    const user = localStorage.getItem('currentUser');\n    return user === 'true';\n  }\n  // Logs user in by settung 'currentUser' to 'true'\n  login() {\n    localStorage.setItem('currentUser', 'true');\n  }\n  // Remove currentUser from localStorage to log out\n  // Afterwards redirect to login\n  logout(state) {\n    this.previousUrl = window.location.pathname;\n    localStorage.removeItem('currentUser');\n    this.router.navigate(['/login'], {\n      queryParams: {\n        returnUrl: state.url\n      }\n    });\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.Router));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;AAMA,OAAM,MAAOA,WAAW;EAEtBC,YAAoBC,MAAc;IAAd,WAAM,GAANA,MAAM;IAE1B,aAAQ,GAAW,EAAE;IACrB,aAAQ,GAAW,EAAE;IAEb,gBAAW,GAAW,EAAE;EALK;EAOrC;EACA;EACOC,eAAe;IACpB,MAAMC,IAAI,GAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;IAChD,OAAOF,IAAI,KAAK,MAAM;EACxB;EAEA;EACAG,KAAK;IACHF,YAAY,CAACG,OAAO,CAAC,aAAa,EAAE,MAAM,CAAC;EAC3C;EAGF;EACA;EACAC,MAAM,CAACC,KAA0B;IAC/B,IAAI,CAACC,WAAW,GAAGC,MAAM,CAACC,QAAQ,CAACC,QAAQ;IAC3CT,YAAY,CAACU,UAAU,CAAC,aAAa,CAAC;IACtC,IAAI,CAACb,MAAM,CAACc,QAAQ,CAAC,CAAC,QAAQ,CAAC,EAAE;MAAEC,WAAW,EAAE;QAAEC,SAAS,EAAER,KAAK,CAACS;MAAG;IAAE,CAAC,CAAC;EAC9E;;AA5BanB,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAoB,SAAXpB,WAAW;EAAAqB,YAFV;AAAM","names":["AuthService","constructor","router","isAuthenticated","user","localStorage","getItem","login","setItem","logout","state","previousUrl","window","location","pathname","removeItem","navigate","queryParams","returnUrl","url","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\marcel-steven.felix\\angular-tour-of-heroes\\src\\app\\auth\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Router, RouterStateSnapshot } from '@angular/router';\n\n@Injectable({ \n  providedIn: 'root'\n})\nexport class AuthService {  \n  \n  constructor(private router: Router) {} \n\n  username: string = '';\n  password: string = '';\n\n  private previousUrl: string = '';\n\n  // Check whether the user is logged in and return\n  // true or false\n  public isAuthenticated(): boolean {\n    const user = localStorage.getItem('currentUser');\n    return user === 'true';\n  }\n  \n  // Logs user in by settung 'currentUser' to 'true'\n  login(): void {\n    localStorage.setItem('currentUser', 'true');\n    }\n  \n\n  // Remove currentUser from localStorage to log out\n  // Afterwards redirect to login\n  logout(state: RouterStateSnapshot): void {\n    this.previousUrl = window.location.pathname;\n    localStorage.removeItem('currentUser');\n    this.router.navigate(['/login'], { queryParams: { returnUrl: state.url }});\n}\n\n}\n\n  \n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}