{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { environment } from '../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common/http\";\nexport class AccountService {\n  constructor(router, http) {\n    this.router = router;\n    this.http = http;\n    this.userSubject = new BehaviorSubject(JSON.parse(localStorage.getItem('user')));\n    this.user = this.userSubject.asObservable();\n  }\n  get userValue() {\n    return this.userSubject.value;\n  }\n  login(username, password) {\n    return this.http.post(`${environment.apiUrl}/users/authenticate`, {\n      username,\n      password\n    }).pipe(map(user => {\n      // store user details and jwt token in local storage to keep user logged in between page refreshes\n      localStorage.setItem('user', JSON.stringify(user));\n      this.userSubject.next(user);\n      return user;\n    }));\n  }\n}\nAccountService.ɵfac = function AccountService_Factory(t) {\n  return new (t || AccountService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.HttpClient));\n};\nAccountService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AccountService,\n  factory: AccountService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAGA,SAASA,eAAe,QAAoB,MAAM;AAClD,SAASC,GAAG,QAAQ,gBAAgB;AAEpC,SAASC,WAAW,QAAQ,6BAA6B;;;;AAOzD,OAAM,MAAOC,cAAc;EAKzBC,YACUC,MAAc,EACdC,IAAgB;IADhB,WAAM,GAAND,MAAM;IACN,SAAI,GAAJC,IAAI;IAEZ,IAAI,CAACC,WAAW,GAAG,IAAIP,eAAe,CAACQ,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAE,CAAC,CAAC;IACjF,IAAI,CAACC,IAAI,GAAG,IAAI,CAACL,WAAW,CAACM,YAAY,EAAE;EAC/C;EACE,IAAWC,SAAS;IAClB,OAAO,IAAI,CAACP,WAAW,CAACQ,KAAK;EAC/B;EAEAC,KAAK,CAACC,QAAgB,EAAEC,QAAgB;IAEtC,OAAO,IAAI,CAACZ,IAAI,CAACa,IAAI,CAAO,GAAGjB,WAAW,CAACkB,MAAM,qBAAqB,EAAE;MAAEH,QAAQ;MAAEC;IAAQ,CAAE,CAAC,CAC1FG,IAAI,CAACpB,GAAG,CAACW,IAAI,IAAG;MACb;MACAF,YAAY,CAACY,OAAO,CAAC,MAAM,EAAEd,IAAI,CAACe,SAAS,CAACX,IAAI,CAAC,CAAC;MAClD,IAAI,CAACL,WAAW,CAACiB,IAAI,CAACZ,IAAI,CAAC;MAC3B,OAAOA,IAAI;IACf,CAAC,CAAC,CAAC;EACX;;AAzBaT,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAAsB,SAAdtB,cAAc;EAAAuB,YAFb;AAAM","names":["BehaviorSubject","map","environment","AccountService","constructor","router","http","userSubject","JSON","parse","localStorage","getItem","user","asObservable","userValue","value","login","username","password","post","apiUrl","pipe","setItem","stringify","next","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\marcel-steven.felix\\angular-tour-of-heroes\\src\\app\\_services\\account.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { environment } from '../environments/environment';\nimport { User } from '../user';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AccountService {\n\n  private userSubject: BehaviorSubject<User | null>;\n  public user: Observable<User | null>;\n\n  constructor(\n    private router: Router,\n    private http: HttpClient\n) {\n    this.userSubject = new BehaviorSubject(JSON.parse(localStorage.getItem('user')!));\n    this.user = this.userSubject.asObservable();\n}\n  public get userValue() {\n    return this.userSubject.value;\n  }\n\n  login(username: string, password: string) {\n    \n    return this.http.post<User>(`${environment.apiUrl}/users/authenticate`, { username, password })\n        .pipe(map(user => {\n            // store user details and jwt token in local storage to keep user logged in between page refreshes\n            localStorage.setItem('user', JSON.stringify(user));\n            this.userSubject.next(user);\n            return user;\n        }));\n}\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}